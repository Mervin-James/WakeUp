from imutils.video import VideoStream
from imutils.video import WebcamVideoStream
from scipy.spatial import distance as dist
from imutils import face_utils
from threading import Thread
from twilio.rest import Client
import RPi.GPIO as GPIO
import numpy as np
import imutils
import cv2
import playsound
import time
import argparse
import dlib



GPIO.setmode(GPIO.BOARD)
GPIO.setup(11, GPIO.OUT)
p = GPIO.PWM(11,50)

# establish twilio Client
# Find these values at https://twilio.com/user/account
account_sid = "ACc29cbf5aca6ea4d508bf860c2957b534"
auth_token = "e3aa1cf501853377d75e04361b32768e"

client = Client(account_sid, auth_token)

def send_sms():
    client.api.account.messages.create(to="+17325096439",
                                                 from_="18482279088",
                                                 body="I am driving drowsy. I need help. I need to pull over and take a nice nap, or switch drivers.")
def sound_alarm(path):
    playsound.playsound(path)

def eye_aspect_ratio(eye):
    A = dist.euclidean(eye[1], eye[5])
    B = dist.euclidean(eye[2], eye[4])
    C = dist.euclidean(eye[0], eye[3])

    ear = (A + B) / (2.0 * C)

    return ear

ap = argparse.ArgumentParser()
ap.add_argument("-p", "--shape-predictor", required=True,
    help="path to facial landmark predictor")
ap.add_argument("-a", "--alarm", type=str, default="",
    help="path alarm .WAV file")
ap.add_argument("-w", "--webcam", type=int, default=0,
    help="index of webcam on system")
args = vars(ap.parse_args())

EYE_AR_THRESH = 0.3
EYE_AR_CONSEC_FRAMES = 48

COUNTER = 0
ALARM_ON = False

print("[INFO] loading facial landmark predictor...")
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor(args["shape_predictor"])

(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_IDXS["left_eye"]
(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_IDXS["right_eye"]

# start video stream
print("[INFO] starting video stream thread...")

vs = VideoStream()

vs.Stream = WebcamVideoStream(src=args["webcam"])
vs.start()
print("WORKING FINE")
time.sleep(1.0)

while True:

    frame = vs.read()

    frame = imutils.resize(frame, width = 450)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    rects = detector(gray, 0)

    for rect in rects:
        shape = predictor(gray, rect)
        shape = face_utils.shape_to_np(shape)

        leftEye = shape[lStart:lEnd]
        rightEye = shape[rStart:rEnd]
        leftEAR = eye_aspect_ratio(leftEye)
        rightEAR = eye_aspect_ratio(rightEye)

        ear = (leftEAR + rightEAR) / 2.0

        leftEyeHull = cv2.convexHull(leftEye)
        rightEyeHull = cv2.convexHull(rightEye)
        cv2.drawContours(frame, [leftEyeHull], -1, (0, 255, 0), 1)
        cv2.drawContours(frame, [rightEyeHull], -1, (0, 255, 0), 1)

        if ear < EYE_AR_THRESH:
            COUNTER += 1

            if COUNTER >= EYE_AR_CONSEC_FRAMES:

                if not ALARM_ON:
                    ALARM_ON = True

                    if args["alarm"] != "":
                        t_sound = Thread(target=sound_alarm,
                            args=(args["alarm"],))
                        t_sound.deamon = True
                        t_sound.start()

                        t_sms = Thread(target=send_sms)
                        t_sms.deamon = True
                        t_sms.start()

                cv2.putText(frame, "Wake Up!", (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

                p.start(2)
                time.sleep(2.0)
                p.ChangeDutyCycle(19)
                time.sleep(2.0)
                p.ChangeDutyCycle(2)



        else:
            COUNTER = 0
            ALARM_ON = False

            p.stop()

        cv2.putText(frame, "EAR: {:.2f}".format(ear), (300, 30),
            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

    cv2.imshow("Frame", frame)
    key = cv2.waitKey(1) & 0xFF

    if key == ord("q"):
        break

cv2.destroyAllWindows()
vs.stop()
GPIO.cleanup()
